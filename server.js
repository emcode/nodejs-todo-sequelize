// Modules & variables
var express = require( 'express' ),
    Sequelize = require( 'sequelize' ),
    bodyParser = require( 'body-parser' ),
    Project,
    Task;

// App config
var app = express();
app.set( 'view engine', 'jade' );
app.set( 'views', __dirname + '/views' );
app.use( bodyParser() );
app.use( '/assets', express.static( __dirname + '/assets' ) );

// Database connection
sequelize = new Sequelize( 'todo', 'root', null, {
    // dialect: 'mysql', DEFAULT
    // host: 'localhost', DEFAULT
    port: 3306
});

sequelize
    .authenticate()
    .complete( function( err ) {
        if ( !!err ) {
            console.log( 'Unable to connect to the database:', err );
        } else {
            console.log( 'Connection has been established successfully.' );
            defineModels();
            defineAssociations();
            syncDatabase();
        }
    });

// Create the database schema (models); consisting of two tables
function defineModels() {
    Project = sequelize.define( 'Project', {
        title: {
            type: Sequelize.STRING,
            defaultValue: 'Untitled'
        }
    });

    Task = sequelize.define( 'Task', {
        title: {
            type: Sequelize.STRING,
            defaultValue: 'Untitled Task'
        }
    });
    // id, createdAt and updatedAt columns automatically generated by sequelize! =)
}

// Assign table relationships
function defineAssociations() {
    Project.hasMany( Task );
    Task.belongsTo( Project ); // Column 'ProjectId' automatically created by sequelize =)
}

// Automatically create the database schema if it doesn't already exist
function syncDatabase() {
    sequelize.sync().complete( function( err ) {
        if ( !!err ) {
            console.log( 'The instance has not been saved:', err );
        } else {
            console.log( 'We have a persisted instance now' );
        }
    });
}

// Routes
// =======================================

// GET all projects
app.get( '/', function( req, res, next ) {
    Project.findAll()
    .complete( function( err, projects ) {
        if( !!err ) return next( err );
        res.render( 'index', { projects: projects } );    
    });
});

// CREATE project API endpoint
app.post( '/projects', function( req, res, next ) {
    Project.create( req.body )
    .complete( function( err, proj ) {
        if ( !!err ) return next( err );
        res.send( proj );
    });
});

// CREATE task API endpoint
app.post( '/project/:id/tasks', function( req, res, next ) {
    req.body.ProjectId = req.params.id;
    Task.create( req.body )
    .complete( function( err, tasks ) {
        if ( !!err ) return next( err );
        res.send( tasks );
    });
});

// GET project with tasks
app.get( '/project/:id', function( req, res, next ) {
    Project.find( Number( req.params.id ) )
    .complete( function( err, proj ) {
        if ( !!err ) return next( err );

        Task.findAll({
            where: {
                ProjectId: proj.id
            }
        })
        .complete( function( err, tasks ) {
            if( !!err ) return next( err );
            res.render( 'project', { project: proj, tasks: tasks } );
        });
    });
});

// DELETE project and associated tasks API endpoint
app.delete( '/project/:id', function( req, res, next ) {
    Project.find( Number( req.params.id ) )
    .complete( function( err, proj ) {
        if ( !!err ) return next( err );
        proj.destroy();
    });

    Task.destroy({
        ProjectId: Number( req.params.id )
    }).success( function( effectedRows ) {
        res.send( 200 );
    });
});

// DELETE task API endpoint
app.delete( '/task/:id', function( req, res, next ) {
    Task.find( Number( req.params.id ) )
    .complete( function( err, task ) {
        if ( !!err ) return next( err );
        task.destroy().success( function() {
            res.send( 200 );
        });

    });
});

app.listen( 3000, function() {
    console.log( 'App started - listening on port 3000' );
});

